// First stage postprocessing (detection data aggregation)

#pragma kernel Postprocess1

#include "Common.hlsl"

// Input
Texture2D<float> Scores;
Texture2D<float> Boxes;
float Threshold;

// Output
RWStructuredBuffer<Detection> Output;
RWStructuredBuffer<uint> OutputCount; // Only used as a counter

[numthreads(20, 1, 1)]
void Postprocess1(uint2 id : SV_DispatchThreadID)
{
    float score = Scores[uint2(1, id.x)];
    if (score < Threshold) return;

    Detection data;

    data.x1 = Boxes[uint2(0, id.x)];
    data.y1 = Boxes[uint2(1, id.x)];
    data.x2 = Boxes[uint2(2, id.x)];
    data.y2 = Boxes[uint2(3, id.x)];
    data.score = score;
    data.pad = 0;

    uint count = OutputCount.IncrementCounter();
    if (count < MAX_DETECTION) Output[count] = data;
}
