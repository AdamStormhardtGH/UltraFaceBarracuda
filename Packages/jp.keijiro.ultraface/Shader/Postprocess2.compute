// Second stage postprocessing (overlap removal)

#pragma kernel Postprocess2

#include "Common.hlsl"

// Input
ConsumeStructuredBuffer<Detection> Input;
ByteAddressBuffer Count;
float Threshold;

// Output
AppendStructuredBuffer<Detection> Output;

// Local arrays for data cache
#define LOCAL_CACHE_SIZE 512
groupshared Detection _entries[LOCAL_CACHE_SIZE];
groupshared bool _flags[LOCAL_CACHE_SIZE];

[numthreads(1, 1, 1)]
void Postprocess2(uint3 id : SV_DispatchThreadID)
{
    // Initialize data cache arrays
    uint entry_count = min(Count.Load(0), LOCAL_CACHE_SIZE);
    if (entry_count == 0) return;

    for (uint i = 0; i < entry_count; i++)
    {
        _entries[i] = Input.Consume();
        _flags[i] = true;
    }

    // Overlap test permutation
    for (i = 0; i < entry_count - 1; i++)
    {
        if (!_flags[i]) continue;

        for (uint j = i + 1; j < entry_count; j++)
        {
            if (!_flags[j]) continue;

            // Overlap test
            if (CalculateIOU(_entries[i], _entries[j]) < Threshold) continue;

            // Score comparison
            if (_entries[i].score < _entries[j].score)
            {
                _flags[i] = false;
                // The box in the outer loop is removed. Break the inner loop.
                break;
            }
            else
                _flags[j] = false;
        }
    }

    // Output aggregation
    for (i = 0; i < entry_count; i++)
        if (_flags[i]) Output.Append(_entries[i]);
}
