// Second stage postprocessing (overlap removal)

#pragma kernel Postprocess2

#include "Common.hlsl"

// Input
StructuredBuffer<Detection> Input;
RWStructuredBuffer<uint> InputCount; // Only used as a counter
float Threshold;

// Output
AppendStructuredBuffer<Detection> Output;

// Local arrays for data cache
groupshared Detection _entries[MAX_DETECTION];
groupshared bool _flags[MAX_DETECTION];

[numthreads(1, 1, 1)]
void Postprocess2(uint3 id : SV_DispatchThreadID)
{
    // Initialize data cache arrays
    uint entry_count = min(MAX_DETECTION, InputCount.IncrementCounter());
    if (entry_count == 0) return;

    for (uint i = 0; i < entry_count; i++)
    {
        _entries[i] = Input[i];
        _flags[i] = true;
    }

    // Find the face with the highest score and size above the threshold
    float highestScore = 0.0f;
    float largestSize = 0.0f;
    int highestIndex = -1;

    for (uint i = 0; i < entry_count; i++)
    {
        if (_entries[i].score >= Threshold)
        {
            float size = (_entries[i].x2 - _entries[i].x1) * (_entries[i].y2 - _entries[i].y1);
            if (size > largestSize)
            {
                largestSize = size;
                highestScore = _entries[i].score;
                highestIndex = i;
            }
            else if (size == largestSize && _entries[i].score > highestScore)
            {
                highestScore = _entries[i].score;
                highestIndex = i;
            }
        }
    }

    // Output the face with the highest score and size if found
    if (highestIndex != -1)
    {
        Output.Append(_entries[highestIndex]);
    }
}
